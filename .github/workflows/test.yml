name: Go Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # Executa para todos os 3 sistemas operacionais
        os: [ ubuntu-latest, windows-latest, macos-13 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker on macOS
        if: runner.os == 'macOS'
        uses: douglascamata/setup-docker-macos-action@v1.0.0

      - name: Set up QEMU
        if: runner.os == 'Windows'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Display Go version
        run: go version

      - name: Download dependencies
        run: go mod tidy

      - name: Start services
        run: docker compose -f docker-compose.e2e.yaml up --build -d

      - name: Wait for API to be healthy
        shell: bash
        run: |
          echo "Waiting for API container to become healthy on ${{ runner.os }}..."
          # Um pequeno sleep inicial pode ajudar em runners mais lentos
          sleep 15
          for i in {1..30}; do
            CONTAINER_ID=$(docker ps -q --filter "name=-app-")
            if [ -z "$CONTAINER_ID" ]; then
              echo "API container not found!"
              docker compose logs app
              exit 1
            fi
          
            HEALTH_STATUS=$(docker inspect -f '{{.State.Health.Status}}' $CONTAINER_ID)
            echo "Attempt $i: API health status is '$HEALTH_STATUS'"
          
            if [ "$HEALTH_STATUS" = "healthy" ]; then
              echo "API is healthy! Proceeding with tests."
              exit 0
            fi
            sleep 5
          done
          
          echo "Error: API did not become healthy in time."
          docker compose logs app 
          exit 1

      - name: Run tests with coverage
        run: go test -v -coverprofile='coverage.out' ./...

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ runner.os }}
          path: coverage.out

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.e2e.yaml down